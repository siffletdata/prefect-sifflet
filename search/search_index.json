{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-sifflet","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Integrate Sifflet Data Observability Platform with Prefect</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-sifflet</code> with <code>pip</code>:</p> <pre><code>pip install prefect-sifflet\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_sifflet.credentials\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect_sifflet.tasks import (\n    trigger_sifflet_rule_run,\n    get_sifflet_rule_run,\n)\n\n\n@flow\ndef execute_rule():\n    tenant = \"&lt;your tenant&gt;\"\n    api_token = \"&lt;your API token&gt;\"\n    rule_id = \"&lt;your rule ID&gt;\"\n\n    response = trigger_sifflet_rule_run(\n        tenant=tenant,\n        api_token=api_token,\n        rule_id=rule_id,\n        wait_for_completion=False\n    )\n    rule_run_id = response[\"id\"]\n\n    rule_run_result = get_sifflet_rule_run(\n        tenant=tenant,\n        api_token=api_token,\n        rule_id=rule_id,\n        rule_run_id=rule_run_id\n    )\n\nexecute_rule()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-sifflet</code>, feel free to open an issue in the prefect-sifflet repository.</p> <p>If you have any questions or issues while using <code>prefect-sifflet</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-sifflet</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-sifflet</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/Siffletapp/prefect-sifflet.git\n\ncd prefect-sifflet/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"sifflet_client/","title":"Sifflet Client","text":""},{"location":"sifflet_client/#prefect_sifflet.sifflet_client","title":"<code>prefect_sifflet.sifflet_client</code>","text":"<p>Sifflet Client object that can be used to interact with Sifflet platform APIs.</p>"},{"location":"sifflet_client/#prefect_sifflet.sifflet_client-classes","title":"Classes","text":""},{"location":"sifflet_client/#prefect_sifflet.sifflet_client.SiffletClient","title":"<code>SiffletClient</code>","text":"<p>SiffletClient object that can be used to interact with Sifflet platform APIs.</p> Source code in <code>prefect_sifflet/sifflet_client.py</code> <pre><code>class SiffletClient:\n\"\"\"\n    SiffletClient object that can be used to interact with Sifflet platform APIs.\n    \"\"\"\n\n    def __init__(self, credentials: SiffletCredentials) -&gt; None:\n\"\"\"\n        Create a SiffletClient object that can be used to interact with Sifflet APIs.\n\n        Args:\n            credentials: a `SiffletCredentials` object that holds the required\n                information to connect to the Sifflet platform.\n        \"\"\"\n        self.credentials = credentials\n        self.api_version = \"v1\"\n        self.api_base_url = (\n            f\"https://{credentials.tenant}api.siffletdata.com/api/{self.api_version}\"\n        )\n\n    def _get_session(self) -&gt; Session:\n\"\"\"\n        Returns a `Session` object configured with the `accept` and\n            `authorization` headers.\n        \"\"\"\n        session = Session()\n        session.headers = {\n            \"accept\": \"application/json\",\n            \"authorization\": f\"Bearer {self.credentials.api_token.get_secret_value()}\",\n        }\n\n        return session\n\n    def _get_trigger_sifflet_run_api_url(self, rule_id: str) -&gt; str:\n\"\"\"\n        Return the API url that can be used to trigger\n            the Sifflet rule identified by `rule_id`.\n\n        rule_id: The Sifflet rule UUID.\n\n        Returns:\n            The API url to trigger the given Sifflet rule.\n        \"\"\"\n        return f\"{self.api_base_url}/rules/{rule_id}/_run\"\n\n    def _get_sifflet_rule_runs_api_url(self, rule_id: str, rule_run_id: str) -&gt; str:\n\"\"\"\n        TODO\n        \"\"\"\n        return f\"{self.api_base_url}/rules/{rule_id}/runs/{rule_run_id}\"\n\n    def trigger_sifflet_rule_run(self, rule_id: str) -&gt; Dict:\n\"\"\"\n        Trigger run of a Sifflet Rule given its unique identifier.\n\n        Args:\n            rule_id: The unique identifier of the Sifflet Rule to trigger.\n\n        Returns:\n            An object with information about the triggered rule run.\n        \"\"\"\n        url = self._get_trigger_sifflet_run_api_url(rule_id=rule_id)\n        session = self._get_session()\n\n        with session.post(url=url) as response:\n            if response.status_code != 200:\n                raise SiffletException(\n                    f\"Error while triggering rule run: {response.text}\"\n                )\n            else:\n                return response.json()\n\n    def get_sifflet_rule_run(self, rule_id: str, rule_run_id: str) -&gt; Dict:\n\"\"\"\n        Return information about a run of a Sifflet Rule given the rule identifier\n        and the run identifier.\n\n        Args:\n            rule_id: The unique identifier of the rule.\n            rule_run_id: The unique identifier of the rule run.\n\n        Returns:\n            An object with information about the requested rule run.\n        \"\"\"\n\n        url = self._get_sifflet_rule_runs_api_url(\n            rule_id=rule_id, rule_run_id=rule_run_id\n        )\n\n        session = self._get_session()\n        with session.get(url=url) as response:\n            if response.status_code != 200:\n                raise SiffletException(\n                    f\"Error while retrieving rule run: {response.text}\"\n                )\n\n            else:\n                return response.json()\n</code></pre>"},{"location":"sifflet_client/#prefect_sifflet.sifflet_client.SiffletClient-functions","title":"Functions","text":""},{"location":"sifflet_client/#prefect_sifflet.sifflet_client.SiffletClient.__init__","title":"<code>__init__</code>","text":"<p>Create a SiffletClient object that can be used to interact with Sifflet APIs.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>SiffletCredentials</code> <p>a <code>SiffletCredentials</code> object that holds the required information to connect to the Sifflet platform.</p> required Source code in <code>prefect_sifflet/sifflet_client.py</code> <pre><code>def __init__(self, credentials: SiffletCredentials) -&gt; None:\n\"\"\"\n    Create a SiffletClient object that can be used to interact with Sifflet APIs.\n\n    Args:\n        credentials: a `SiffletCredentials` object that holds the required\n            information to connect to the Sifflet platform.\n    \"\"\"\n    self.credentials = credentials\n    self.api_version = \"v1\"\n    self.api_base_url = (\n        f\"https://{credentials.tenant}api.siffletdata.com/api/{self.api_version}\"\n    )\n</code></pre>"},{"location":"sifflet_client/#prefect_sifflet.sifflet_client.SiffletClient.get_sifflet_rule_run","title":"<code>get_sifflet_rule_run</code>","text":"<p>Return information about a run of a Sifflet Rule given the rule identifier and the run identifier.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>The unique identifier of the rule.</p> required <code>rule_run_id</code> <code>str</code> <p>The unique identifier of the rule run.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>An object with information about the requested rule run.</p> Source code in <code>prefect_sifflet/sifflet_client.py</code> <pre><code>def get_sifflet_rule_run(self, rule_id: str, rule_run_id: str) -&gt; Dict:\n\"\"\"\n    Return information about a run of a Sifflet Rule given the rule identifier\n    and the run identifier.\n\n    Args:\n        rule_id: The unique identifier of the rule.\n        rule_run_id: The unique identifier of the rule run.\n\n    Returns:\n        An object with information about the requested rule run.\n    \"\"\"\n\n    url = self._get_sifflet_rule_runs_api_url(\n        rule_id=rule_id, rule_run_id=rule_run_id\n    )\n\n    session = self._get_session()\n    with session.get(url=url) as response:\n        if response.status_code != 200:\n            raise SiffletException(\n                f\"Error while retrieving rule run: {response.text}\"\n            )\n\n        else:\n            return response.json()\n</code></pre>"},{"location":"sifflet_client/#prefect_sifflet.sifflet_client.SiffletClient.trigger_sifflet_rule_run","title":"<code>trigger_sifflet_rule_run</code>","text":"<p>Trigger run of a Sifflet Rule given its unique identifier.</p> <p>Parameters:</p> Name Type Description Default <code>rule_id</code> <code>str</code> <p>The unique identifier of the Sifflet Rule to trigger.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>An object with information about the triggered rule run.</p> Source code in <code>prefect_sifflet/sifflet_client.py</code> <pre><code>def trigger_sifflet_rule_run(self, rule_id: str) -&gt; Dict:\n\"\"\"\n    Trigger run of a Sifflet Rule given its unique identifier.\n\n    Args:\n        rule_id: The unique identifier of the Sifflet Rule to trigger.\n\n    Returns:\n        An object with information about the triggered rule run.\n    \"\"\"\n    url = self._get_trigger_sifflet_run_api_url(rule_id=rule_id)\n    session = self._get_session()\n\n    with session.post(url=url) as response:\n        if response.status_code != 200:\n            raise SiffletException(\n                f\"Error while triggering rule run: {response.text}\"\n            )\n        else:\n            return response.json()\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#prefect_sifflet.tasks","title":"<code>prefect_sifflet.tasks</code>","text":"<p>Collection of tasks to interact with the Sifflet Data Observability platform.</p>"},{"location":"tasks/#prefect_sifflet.tasks-classes","title":"Classes","text":""},{"location":"tasks/#prefect_sifflet.tasks-functions","title":"Functions","text":""},{"location":"tasks/#prefect_sifflet.tasks.get_sifflet_rule_run","title":"<code>get_sifflet_rule_run</code>","text":"<p>Get information about a Sifflet Rule run given the rule identifier and the rule run identifier.</p> <p>Parameters:</p> Name Type Description Default <code>tenant</code> <code>str</code> <p>The tenant of the Sifflet deployment.</p> required <code>api_token</code> <code>str</code> <p>The API token to use to authenticate API calls made to Sifflet.</p> required <code>rule_id</code> <code>str</code> <p>The Sifflet Rule unique identifier.</p> required <code>rule_run_id</code> <code>str</code> <p>The Sifflet Rule run unique identifier.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>An object with information about the requested rule run.</p> Source code in <code>prefect_sifflet/tasks.py</code> <pre><code>@task\ndef get_sifflet_rule_run(\n    tenant: str, api_token: str, rule_id: str, rule_run_id: str\n) -&gt; Dict:\n\"\"\"\n    Get information about a Sifflet Rule run given the rule identifier\n    and the rule run identifier.\n\n    Args:\n        tenant: The tenant of the Sifflet deployment.\n        api_token: The API token to use to authenticate API calls made to Sifflet.\n        rule_id: The Sifflet Rule unique identifier.\n        rule_run_id: The Sifflet Rule run unique identifier.\n\n    Returns:\n        An object with information about the requested rule run.\n    \"\"\"\n    creds = SiffletCredentials(tenant=tenant, api_token=SecretStr(api_token))\n    sc = SiffletClient(credentials=creds)\n\n    return sc.get_sifflet_rule_run(rule_id=rule_id, rule_run_id=rule_run_id)\n</code></pre>"},{"location":"tasks/#prefect_sifflet.tasks.trigger_sifflet_rule_run","title":"<code>trigger_sifflet_rule_run</code>","text":"<p>Trigger a Sifflet Rule run and optionally wait for its completion.</p> <p>Parameters:</p> Name Type Description Default <code>tenant</code> <code>str</code> <p>The tenant of the Sifflet deployment.</p> required <code>api_token</code> <code>str</code> <p>The API token to use to authenticate API calls made to Sifflet.</p> required <code>rule_id</code> <code>str</code> <p>The Sifflet Rule unique identifier.</p> required <code>wait_for_completion</code> <code>bool</code> <p>Whether to wait for the rule run to complete or not.</p> <code>True</code> <code>wait_seconds_between_api_calls</code> <code>int</code> <p>THe number of seconds to wait between API calls made to retrieve the rule run status.</p> <code>10</code> <p>Returns:</p> Type Description <code>Dict</code> <p>If <code>wait_for_completion</code> is <code>True</code>, then returns an object with information about the triggered run. Otherwise, returns information about the completed rule run.</p> Source code in <code>prefect_sifflet/tasks.py</code> <pre><code>@task\ndef trigger_sifflet_rule_run(\n    tenant: str,\n    api_token: str,\n    rule_id: str,\n    wait_for_completion: bool = True,\n    wait_seconds_between_api_calls: int = 10,\n) -&gt; Dict:\n\"\"\"\n    Trigger a Sifflet Rule run and optionally wait for its completion.\n\n    Args:\n        tenant: The tenant of the Sifflet deployment.\n        api_token: The API token to use to authenticate API calls made to Sifflet.\n        rule_id: The Sifflet Rule unique identifier.\n        wait_for_completion: Whether to wait for the rule run to complete or not.\n        wait_seconds_between_api_calls: THe number of seconds to wait between API calls\n            made to retrieve the rule run status.\n\n    Returns:\n        If `wait_for_completion` is `True`, then returns an object with information\n            about the triggered run. Otherwise, returns information about\n            the completed rule run.\n    \"\"\"\n    creds = SiffletCredentials(tenant=tenant, api_token=SecretStr(api_token))\n    sc = SiffletClient(credentials=creds)\n\n    if wait_for_completion:\n        trigger_rule_run_response = sc.trigger_sifflet_rule_run(rule_id=rule_id)\n        rule_run_id = trigger_rule_run_response[\"id\"]\n\n        while True:\n            rule_run_response = sc.get_sifflet_rule_run(\n                rule_id=rule_id, rule_run_id=rule_run_id\n            )\n            rule_run_status = rule_run_response[\"status\"]\n            if rule_run_status != \"RUNNING\":\n                return rule_run_response\n\n            sleep(wait_seconds_between_api_calls)\n\n    else:\n        return sc.trigger_sifflet_rule_run(rule_id=rule_id)\n</code></pre>"}]}